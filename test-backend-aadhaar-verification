const express = require('express');
const axios = require('axios');
const crypto = require('crypto');
const Web3 = require('web3');

const app = express();
const PORT = 3000;
app.use(express.json());

// Replace with your blockchain details
const web3 = new Web3("https://polygon-mumbai.infura.io/v3/YOUR_INFURA_PROJECT_ID");
const contractAddress = "0xYourSmartContractAddress";
const contractABI = [...]; // Your Solidity contract ABI
const contract = new web3.eth.Contract(contractABI, contractAddress);

const UIDAI_API = "https://uidai.gov.in"; // Placeholder for UIDAI API

// Store active OTP transactions (temporary in-memory storage)
const otpRequests = {};

// Step 1: Request Aadhaar OTP
app.post('/request-otp', async (req, res) => {
    const { aadhaarNumber } = req.body;
    try {
        let response = await axios.post(`${UIDAI_API}/generate-otp`, { aadhaarNumber });
        let transactionId = response.data.transactionId;
        otpRequests[aadhaarNumber] = transactionId; // Store transaction ID
        res.json({ message: "OTP sent successfully", transactionId });
    } catch (error) {
        res.status(500).json({ error: "Error sending OTP", details: error.message });
    }
});

// Step 2: Verify Aadhaar OTP & Register DID
app.post('/verify-otp', async (req, res) => {
    const { aadhaarNumber, otp } = req.body;
    const transactionId = otpRequests[aadhaarNumber];

    if (!transactionId) return res.status(400).json({ error: "OTP not requested or expired" });
    
    try {
        let response = await axios.post(`${UIDAI_API}/verify-otp`, { aadhaarNumber, otp, transactionId });
        if (!response.data.verified) throw new Error("Invalid OTP");

        // Hash Aadhaar and register DID
        let aadhaarHash = crypto.createHash("sha256").update(aadhaarNumber).digest("hex");
        let userAddress = "0xUserWalletAddress"; // Replace with actual user wallet
        let publicKey = "0xUserPublicKey";
        let metadata = "User metadata";

        let tx = await contract.methods.registerDID(`did:example:${userAddress}`, publicKey, metadata, aadhaarHash)
            .send({ from: userAddress });
        
        delete otpRequests[aadhaarNumber]; // Remove used OTP
        res.json({ message: "DID registered successfully", txHash: tx.transactionHash });
    } catch (error) {
        res.status(500).json({ error: "OTP verification failed", details: error.message });
    }
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
